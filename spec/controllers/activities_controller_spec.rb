 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe ActivitiesController, type: :controller do
  login_user

  describe "#index" do
    subject(:send_request) { get(:index) }

    before { create_list(:activity, 2) }

    it { is_expected.to be_successful }
  end

  describe "#show" do
    subject(:send_request) { get(:show, params: { id: activity.id }) }

    let(:activity) { create(:activity) }

    it { is_expected.to be_successful }
  end

  describe "#new" do
    subject(:send_request) { get(:new) }

    it { is_expected.to be_successful }
  end

  describe "#edit" do
    subject(:send_request) { get(:edit, params: { id: activity.id }) }

    let(:activity) { create(:activity, user: User.last) }

    it { is_expected.to be_successful }
  end

  describe "#create" do
    subject(:send_request) { post(:create, params: { activity: attributes }) }

    context "with valid parameters" do
      let(:attributes) { attributes_for(:activity) }

      it "creates a new Activity" do
        expect { send_request }.to change(Activity, :count).by(1)
      end

      # bad practice
      it { is_expected.to redirect_to(activity_url(Activity.last)) }
    end

    context "with invalid parameters" do
      let(:attributes) { attributes_for(:user) }

      it "does not create a new Activity" do
        expect { send_request }.not_to change(Activity, :count)
      end
    end
  end

  describe "#update" do
    context "with valid parameters" do
    end

    context "with invalid parameters" do
    end
  end

  describe "#destroy" do
    subject(:send_request) { delete(:destroy, params: { id: activity.id }) }

    let(:activity) { create(:activity, user: User.last) }

    xit "destroys the requested activity" do
      expect { send_request }.to change(Activity, :count).by(-1)
    end

    it { is_expected.to redirect_to(activities_url) }
  end
end
